// @(h)LvItem.cs ver 0.00 ( '22.05.20 Nov-Lab ) 作成開始
// @(h)LvItem.cs ver 0.21 ( '22.05.20 Nov-Lab ) アルファ版完成

// @(s)
// 　【デバッグデータリストビュー項目情報】
// 　デバッグデータリストビュー項目１件分の情報を管理し、ListViewItemとの相互変換機能や、クリップボード用文字列の作成機能を提供します。

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Drawing;
using System.Windows.Forms;

using NovLab;
using NovLab.DebugStation;
using NovLab.Windows.Forms;


namespace DebugStation
{

    //====================================================================================================
    /// <summary>
    /// 【デバッグデータリストビュー項目情報】
    /// デバッグデータリストビュー項目１件分の情報を管理し、ListViewItemとの相互変換機能や、クリップボード用文字列の作成機能を提供します。
    /// </summary>
    //====================================================================================================
    public class LvItem
    {
        //====================================================================================================
        // 内部定数
        //====================================================================================================
        /// <summary>
        /// 【日時文字列書式】年/月/日 時:分:秒.ミリ秒
        /// </summary>
        protected const string M_DATETIME_FORMAT = "yy/MM/dd HH:mm:ss.fff";


        //====================================================================================================
        // 公開フィールドと内部フィールド
        //====================================================================================================

        /// <summary>
        /// 【メッセージ文字列】
        /// </summary>
        public readonly string message;

        /// <summary>
        /// 【日時文字列】
        /// </summary>
        public readonly string dateTimeStr;

        /// <summary>
        /// 【ソース文字列】
        /// </summary>
        public readonly string sourceStr;

        /// <summary>
        /// 【タグデータ】ListViewItem.Tag に設定する付属情報です。
        /// </summary>
        protected readonly TagData m_tagData = new TagData();


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【クリップボード用文字列作成】このインスタンスの内容からクリップボード用文字列を作成します。
        /// </summary>
        /// <returns>
        /// クリップボード用文字列
        /// </returns>
        //--------------------------------------------------------------------------------
        public string ToClipboardString()
        {
            //------------------------------------------------------------
            /// このインスタンスの内容からクリップボード用文字列を作成する
            //------------------------------------------------------------
            if (m_tagData.isSeparator)
            {                                                           //// 区切り線表示用リストビュー項目の場合
                return dateTimeStr + "\r\n";                            /////  戻り値 = 日時文字列(区切り線) で関数終了
            }

            return dateTimeStr + "\t" +                                 //// クリップボード用文字列を作成して戻り値とし、関数終了
                   sourceStr + "\t" +
                   message + "\r\n";
        }


        //====================================================================================================
        // ListViewItem との相互変換関連
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【ListViewItem生成】このインスタンスの内容から ListViewItem を生成します。
        /// </summary>
        /// <returns>
        /// 生成した ListViewItem
        /// </returns>
        //--------------------------------------------------------------------------------
        public ListViewItem ToListViewItem()
        {
            // ＜メモ＞
            // ・デバッグデータリストビューのデザインと合致させておくこと。
            //------------------------------------------------------------
            /// このインスタンスの内容から ListViewItem を生成する
            //------------------------------------------------------------
            var listViewItem = new ListViewItem(message);                   //// メッセージ文字列からリストビュー項目を生成する
            listViewItem.SubItems.XAdd(nameof(dateTimeStr), dateTimeStr);   //// サブ項目に日時文字列を追加する
            listViewItem.SubItems.XAdd(nameof(sourceStr), sourceStr);       //// サブ項目にソース文字列を追加する
            listViewItem.Tag = m_tagData;                                   //// Tagにデバッグデータを設定する


            //------------------------------------------------------------
            /// 文字色を設定する
            //------------------------------------------------------------
            if (m_tagData.debugData != null)
            {                                                           //// デバッグデータが設定されている場合
                var foreColor = M_GetForeColor(m_tagData.debugData);    /////  デバッグデータから文字色を取得する
                if (foreColor != Color.Empty)
                {                                                       /////  文字色 = Empty(未指定) でない場合
                    listViewItem.ForeColor = foreColor;                 //////   リストビュー項目に文字色を設定する
                }
            }


            return listViewItem;                                        /// 戻り値 = 追加したリストビュー項目 で関数終了
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター(リストビュー項目指定)】
        /// リストビュー項目からデバッグデータリストビュー項目情報を生成します。
        /// </summary>
        /// <param name="listViewItem">[in ]：リストビュー項目</param>
        //--------------------------------------------------------------------------------
        public LvItem(ListViewItem listViewItem)
        {
            //------------------------------------------------------------
            /// リストビュー項目からデバッグデータリストビュー項目情報を生成する
            //------------------------------------------------------------
            message = listViewItem.Text;                                    //// リストビュー項目からメッセージ文字列を取得してフィールドに格納する
            dateTimeStr = listViewItem.SubItems[nameof(dateTimeStr)].Text;  //// リストビュー項目から日時文字列を取得してフィールドに格納する
            sourceStr = listViewItem.SubItems[nameof(sourceStr)].Text;      //// リストビュー項目からソース文字列を取得してフィールドに格納する
            m_tagData = listViewItem.Tag as TagData;                        //// リストビュー項目からタグデータを取得してフィールドに格納する
        }


        //====================================================================================================
        // コンストラクター
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター(デバッグデータ指定)】
        /// デバッグデータからデバッグデータリストビュー項目情報を生成します。
        /// </summary>
        /// <param name="debugData">[in ]：デバッグデータ</param>
        //--------------------------------------------------------------------------------
        public LvItem(DebugData debugData)
        {
            message = new string('　', debugData.Header.IndentLevel) +
                        debugData.GetOutline();
            dateTimeStr = debugData.Header.EventDateTime.ToLocalTime().ToString(M_DATETIME_FORMAT);
            sourceStr = debugData.Header.EventSource.XRemoveEnd(".exe", true, null) + "(" + debugData.Header.ProcessId + ")";
            m_tagData.debugData = debugData;
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター(生文字列指定)】
        /// 生文字列からデバッグデータリストビュー項目情報を生成します。
        /// </summary>
        /// <param name="rawString">[in ]：生文字列</param>
        //--------------------------------------------------------------------------------
        public LvItem(string rawString)
        {
            message = rawString;
            dateTimeStr = DateTime.Now.ToString(M_DATETIME_FORMAT);
            sourceStr = "";
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター(区切り線)】仮実装
        /// </summary>
        /// <param name="dummy"></param>
        //--------------------------------------------------------------------------------
        public LvItem(bool dummy)
        {
            message = "";
            dateTimeStr = "---------------------"; ;
            sourceStr = "";
            m_tagData.isSeparator = true;
        }


        //====================================================================================================
        // static 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグデータ取得】リストビュー項目からデバッグデータを取得します。
        /// </summary>
        /// <param name="listViewItem">[in ]：リストビュー項目</param>
        /// <returns>
        /// デバッグデータ[null = 取得失敗]
        /// </returns>
        //--------------------------------------------------------------------------------
        public static DebugData GetDebugData(ListViewItem listViewItem)
        {
            //------------------------------------------------------------
            /// リストビュー項目からデバッグデータを取得する
            //------------------------------------------------------------
            var tagData = new LvItem(listViewItem).m_tagData;           //// リストビュー項目からタグデータを取得する
            if (tagData == null)
            {                                                           //// タグデータが未設定の場合(安全装置)
                return null;                                            /////  戻り値 = null(取得失敗) で関数終了
            }
            else
            {                                                           //// 取得成功の場合
                return tagData.debugData;                               /////  戻り値 = タグデータに設定されているデバッグデータ で関数終了
            }
        }


        //====================================================================================================
        // 内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【文字色取得】デバッグデータの内容から文字色を決定し取得します。
        /// </summary>
        /// <param name="debugData">[in ]：デバッグデータ</param>
        /// <returns>
        /// 文字色[Color.Empty = 未指定]
        /// </returns>
        //--------------------------------------------------------------------------------
        protected Color M_GetForeColor(DebugData debugData)
        {
            //------------------------------------------------------------
            /// デバッグデータの内容から文字色を決定し取得する
            //------------------------------------------------------------
            switch (debugData.Header.EventType)
            {                                                           //// イベント種類で分岐
                case TraceEventType.Verbose:                            /////  冗長ログ の場合
                    return Color.Gray;                                  //////   戻り値 = 灰色 で関数終了

                case TraceEventType.Critical:                           /////  致命的なエラーまたは
                case TraceEventType.Error:                              /////- 回復可能なエラー の場合
                    return Color.Red;                                   //////   戻り値 = 赤色 で関数終了

                case TraceEventType.Warning:                            /////  警告 の場合
                    return Color.Orange;                                //////   戻り値 = オレンジ色 で関数終了

                default:                                                /////  上記以外の場合
                    return Color.Empty;                                 //////   戻り値 = Empty(未指定) で関数終了
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【タグデータ】ListViewItem.Tag に設定する付属情報を管理します。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected class TagData
        {
            /// <summary>
            /// 【デバッグデータ】null = なし
            /// </summary>
            public DebugData debugData;

            /// <summary>
            /// 【区切り線フラグ】区切り線表示用のリストビュー項目かどうかを示します。
            /// </summary>
            public bool isSeparator;
        }

    }
}
