// @(h)FrmOutputView.cs ver 0.00 ( '22.04.16 Nov-Lab ) 作成開始
// @(h)FrmOutputView.cs ver 0.01 ( '22.05.10 Nov-Lab ) 機能追加：デバッグデータパネルを追加した。
// @(h)FrmOutputView.cs ver 0.02 ( '22.05.12 Nov-Lab ) 機能追加：フォームクローズ制御を追加した。
// @(h)FrmOutputView.cs ver 0.53 ( '22.05.20 Nov-Lab ) 機能追加：ベータ版完成。デバッグデータリストビュー用コンテキストメニューを追加した。
// @(h)FrmOutputView.cs ver 0.53a( '22.05.24 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【出力ビュー画面】デバッグデータを一覧表示します。

#if DEBUG
// #define VERBOSELOG  // 冗長ログ有効化
#endif

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Drawing;
using System.Windows.Forms;

using NovLab;
using NovLab.DebugStation;
using NovLab.Windows.Forms;

//[-] 保留：リストロック  更新を停止(情報を蓄積しておいて、再開したときに一気に追加する)

//[-] 保留：スクロールロック(リストへの追加はするがスクロールはしない)

//[-] 保留：プロセス名、プロセスID、文字列、イベント日時などによるフィルター処理

//[-] 保留：リストビュー項目(デバッグデータの場合)への操作機能。リストに対してではなく、蓄積データに対して操作をし、他のウィンドウを含めた利用箇所すべてに反映する。
//        ：・インデントレベル+1
//        ：・インデントレベル-1
//        ：・区切り線を上に追加
//        ：・区切り線を下に追加

//[-] 保留：インデントレベルやコールスタックを利用したツリー表示機能

//[-] 保留：経過時間の計測機能


namespace DebugStation
{
    //====================================================================================================
    /// <summary>
    /// 【出力ビュー画面】デバッグデータを一覧表示します。
    /// </summary>
    //====================================================================================================
    public partial class FrmOutputView : Form,
                                         IFormCloseControl  // フォームクローズ制御I/F
    {
        //====================================================================================================
        // 内部フィールド
        //====================================================================================================

        // ＜メモ＞現在は未使用です。イベント日時によるフィルター処理に備えて用意しています。
        /// <summary>
        /// 【フォームオープン日時(読み取り専用。UTC)】このフォームを開いた日時です。
        /// </summary>
        protected readonly DateTime m_formOpenDateTime;

        /// <summary>
        /// 【強制クローズフラグ】このフラグが true の場合は、FormClosing イベントで実行確認を行いません。
        /// </summary>
        protected bool m_forceClose = false;


        //====================================================================================================
        // フォームイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【出力ビュー画面・コンストラクター】インスタンスを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public FrmOutputView()
        {
            //------------------------------------------------------------
            // 自動生成された部分
            //------------------------------------------------------------
            InitializeComponent();


            //------------------------------------------------------------
            /// インスタンスを初期化する
            //------------------------------------------------------------
            m_formOpenDateTime = DateTime.UtcNow;                       //// フォームオープン日時 = 現在日時
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【フォーム_Load】本フォームを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void Form_Load(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// 本フォームを初期化する
            //------------------------------------------------------------
            PnlDebugData.Clear();                                       //// デバッグデータパネルをクリアする
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【フォーム_FormClosing】必要な場合は実行確認をします。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void FrmOutputView_FormClosing(object sender, FormClosingEventArgs e)
        {
            //------------------------------------------------------------
            /// 必要な場合は実行確認をする
            //------------------------------------------------------------
            if (m_forceClose == true)
            {                                                           //// 強制クローズフラグ = true の場合
                return;                                                 /////  何もせずに関数終了
            }

            if (NeedConfirmationBeforeClose == false)
            {                                                           //// クローズ前実行確認要求フラグ = false の場合
                return;                                                 /////  何もせずに関数終了
            }

            var result = XMessageBox.ShowExclamationYN(                 //// 実行確認メッセージを表示する
                "ウィンドウを閉じます。\nよろしいですか?",
                this.Text);
            if (result != DialogResult.Yes)
            {                                                           //// 「はい」が選択されなかった場合
                e.Cancel = true;                                        /////  FormClosing イベントをキャンセルする
                return;                                                 /////  関数終了
            }
        }


        //====================================================================================================
        // フォームクローズ制御I/Fの実装
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【強制クローズ】実行確認なしにフォームを閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        public void CloseForce()
        {
            //------------------------------------------------------------
            /// 実行確認なしにフォームを閉じる
            //------------------------------------------------------------
            m_forceClose = true;                                        //// 強制クローズフラグ = true
            Close();                                                    //// フォームを閉じる
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【クローズ前実行確認要求フラグ】クローズ前に実行確認が必要かどうかを示します。
        /// [true = 実行確認が必要 / false = 実行確認は不要]
        /// </summary>
        //--------------------------------------------------------------------------------
        public bool NeedConfirmationBeforeClose
        {
            get
            {
                //[-] フィルター機能実装時は、フィルター条件を設定しているかどうかもチェックすべきかも
                //------------------------------------------------------------
                /// クローズ前に実行確認が必要かどうかをチェックする
                //------------------------------------------------------------
                if (LvwDebugData.Items.Count != 0)
                {                                                           //// デバッグデータリストビューに項目がある場合
                    return true;                                            /////  戻り値 = true(実行確認が必要) で関数終了
                }

                return false;                                               //// 上記チェックをパスした場合、戻り値 = false(実行確認は不要) で関数終了
            }
        }


        //====================================================================================================
        // コントロールイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグデータリストビュー_ItemSelectionChanged】
        /// 選択項目が変更された場合に呼び出されます。<br></br>リストビューで選択されているデバッグデータをパネルに表示します。
        /// </summary>
        /// <remarks>
        /// 補足<br></br>
        /// ・大量の項目を一気に選択／選択解除した場合、このイベントも大量に発生します。<br></br>
        /// ・過剰なパネル更新処理を防ぐため、即時反映ではなく、遅延反映で処理します。<br></br>
        /// </remarks>
        //--------------------------------------------------------------------------------
        private void LvwDebugData_ItemSelectionChanged(object sender, ListViewItemSelectionChangedEventArgs e)
        {
#if VERBOSELOG
            Debug.Print("LvwDebugData_ItemSelectionChanged");
#endif

            DebugData debugData;    // デバッグデータ

            //------------------------------------------------------------
            /// リストビューで選択されているデバッグデータをパネルに表示する
            //------------------------------------------------------------
            if (LvwDebugData.SelectedItems.Count == 1)
            {                                                           //// デバッグデータリストビューの選択項目数 = 1 の場合
                debugData =                                             /////  単一選択中のリストビュー項目からデバッグデータを取得する(取得失敗時は null(パネルクリア))
                    LvItem.GetDebugData(LvwDebugData.SelectedItems[0]);
            }
            else
            {                                                           //// デバッグデータリストビューの選択項目数 = 1 でない場合
                debugData = null;                                       /////  デバッグデータ = null(パネルをクリアする)
            }


            PnlDebugData.RequestDelayedReflect(debugData);              //// デバッグデータパネル遅延反映要求処理を行う
        }


        //====================================================================================================
        // 公開メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【情報追加(デバッグデータ)】デバッグデータリストビューへデバッグデータを追加します。
        /// </summary>
        /// <param name="debugData">[in ]：デバッグデータ</param>
        //--------------------------------------------------------------------------------
        public void AddInfo(DebugData debugData)
        {
            //[-] 保留：プロセス名やプロセスIDでフィルター
            //------------------------------------------------------------
            /// デバッグデータリストビューにデバッグデータを追加する
            //------------------------------------------------------------
            LvwDebugData.XAddItemWithScroll(new LvItem(debugData).ToListViewItem());
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【情報追加(生文字列)】デバッグデータリストビューへ生文字列を追加します。受信した文字列の内容を解析できなかった場合に使用します。
        /// </summary>
        /// <param name="rawString">[in ]：生文字列</param>
        //--------------------------------------------------------------------------------
        public void AddInfo(string rawString)
        {
            //[-] 保留：フィルター機能を実装したときは、出力対象=すべて の場合のみ出力
            //------------------------------------------------------------
            /// デバッグデータリストビューに生文字列を追加する
            //------------------------------------------------------------
            LvwDebugData.XAddItemWithScroll(new LvItem(rawString).ToListViewItem());
        }


        //====================================================================================================
        // デバッグデータリストビュー用コンテキストメニュー
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【デバッグデータリストビュー用コンテキストメニュー_Opening】
        /// デバッグデータリストビューの状態に合わせてコンテキストメニューを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_Opening(object sender, CancelEventArgs e)
        {
            //------------------------------------------------------------
            /// デバッグデータリストビューの状態に合わせてコンテキストメニューを初期化する
            //------------------------------------------------------------
            if (LvwDebugData.Items.Count == 0)
            {                                                           //// デバッグデータリストビューに項目がない場合
                CMnuDebugData_MoveFirst.Enabled = false;                /////  「最上部へ移動」を使用不可能にする
                CMnuDebugData_MoveLast.Enabled = false;                 /////  「最下部へ移動」を使用不可能にする
                CMnuDebugData_Clear.Enabled = false;                    /////  「クリア」を使用不可能にする
                CMnuDebugData_CopySelection.Enabled = false;            /////  「選択部分をコピー」を使用不可能にする
                CMnuDebugData_CopyAll.Enabled = false;                  /////  「すべてコピー」を使用不可能にする
            }
            else
            {                                                           //// デバッグデータリストビューに項目がある場合
                CMnuDebugData_MoveFirst.Enabled = true;                 /////  「最上部へ移動」を使用可能にする
                CMnuDebugData_MoveLast.Enabled = true;                  /////  「最下部へ移動」を使用可能にする
                CMnuDebugData_Clear.Enabled = true;                     /////  「クリア」を使用可能にする
                CMnuDebugData_CopySelection.Enabled = true;             /////  「選択部分をコピー」を使用可能にする
                CMnuDebugData_CopyAll.Enabled = true;                   /////  「すべてコピー」を使用可能にする
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - 最上部へ移動_Click】
        /// デバッグデータリストビューの最初の項目へ移動します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_MoveFirst_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// 最初の項目へ移動する
            //------------------------------------------------------------
            if (LvwDebugData.Items.Count == 0) return;                      //// デバッグデータリストビューに項目がない場合、何もせずに関数終了(安全装置)
            LvwDebugData.XSetSelectedIndex(0);                              //// 最初の項目を単一選択状態にする(フォーカス移動あり、スクロールあり)
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - 最下部へ移動_Click】
        /// デバッグデータリストビューの最後の項目へ移動します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_MoveLast_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// 最後の項目へ移動する
            //------------------------------------------------------------
            if (LvwDebugData.Items.Count == 0) return;                      //// デバッグデータリストビューに項目がない場合、何もせずに関数終了(安全装置)
            LvwDebugData.XSetSelectedIndex(LvwDebugData.Items.Count - 1);   //// 最後の項目を単一選択状態にする(フォーカス移動あり、スクロールあり)
        }


        //[-] 仮実装：リストに対してではなく、蓄積データに対して操作をし、他のウィンドウも含めた利用箇所すべてに反映する。
        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - 区切り線を追加_Click】
        /// デバッグデータリストビューに区切り線を追加します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_AddLine_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// デバッグデータリストビューに区切り線を追加する
            //------------------------------------------------------------
            LvwDebugData.XAddItemWithScroll(new LvItem(true).ToListViewItem());
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - クリア_Click】
        /// デバッグデータリストビューをクリアします。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_Clear_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// デバッグデータリストビューをクリアする
            //------------------------------------------------------------
            var result = XMessageBox.ShowExclamationYN(
                "リストをクリアします。\nよろしいですか？",
                this.Text);                                             //// 実行確認メッセージを表示する
            if (result != DialogResult.Yes)
            {                                                           //// 「はい」が選択されなかった場合
                return;                                                 /////  何もせずに関数終了
            }

            LvwDebugData.XSetSelectedIndex(-1);                         //// デバッグデータリストビューを選択項目なし状態にし、ItemSelectionChanged イベントを発生させる
            LvwDebugData.Items.Clear();                                 //// デバッグデータリストビューの全項目をクリアする
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - 選択部分をコピー_Click】
        /// デバッグデータリストビューの選択項目をクリップボードへコピーします。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_CopySelection_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// デバッグデータリストビューの選択項目をクリップボードへコピーする
            //------------------------------------------------------------
            var workStr = new StringBuilder();                          //// 文字列編集領域を生成する

            foreach (ListViewItem item in LvwDebugData.SelectedItems)
            {                                                           //// デバッグデータリストビューの選択項目を繰り返す
                workStr.Append(new LvItem(item).ToClipboardString());   /////  リストビュー項目からクリップボード用文字列を生成し、文字列編集領域に追加する
            }

            Clipboard.SetText(workStr.ToString());                      //// 文字列編集領域の内容をクリップボードにコピーする
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メニュー：デバッグデータリストビュー用コンテキストメニュー - すべてコピー_Click】
        /// デバッグデータリストビューの全項目をクリップボードへコピーします。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void CMnuDebugData_CopyAll_Click(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// デバッグデータリストビューの全項目をクリップボードへコピーする
            //------------------------------------------------------------
            var workStr = new StringBuilder();                          //// 文字列編集領域を生成する

            foreach (ListViewItem item in LvwDebugData.Items)
            {                                                           //// デバッグデータリストビューの全項目を繰り返す
                workStr.Append(new LvItem(item).ToClipboardString());   /////  リストビュー項目からクリップボード用文字列を生成し、文字列編集領域に追加する
            }

            Clipboard.SetText(workStr.ToString());                      //// 文字列編集領域の内容をクリップボードにコピーする
        }

    }
}
