// @(h)FrmAppDebugStation.cs ver 0.00 ( '22.04.09 Nov-Lab ) 作成開始
// @(h)FrmAppDebugStation.cs ver 0.51 ( '22.05.18 Nov-Lab ) ベータ版完成
// @(h)FrmAppDebugStation.cs ver 0.51a( '22.05.24 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【デバッグステーション・メイン画面】デバッグステーションのメイン画面です。

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

using NovLab;
using NovLab.IO.Mailslot;
using NovLab.DebugStation;
using NovLab.Windows.Forms;


namespace DebugStation
{
    //====================================================================================================
    /// <summary>
    /// 【デバッグステーション・メイン画面】デバッグステーションのメイン画面です。
    /// </summary>
    //====================================================================================================
    public partial class FrmAppDebugStation : Form
    {
        //====================================================================================================
        // フォームイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メインフォーム_コンストラクター】新しいインスタンスを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public FrmAppDebugStation()
        {
            //------------------------------------------------------------
            // 自動生成された部分
            //------------------------------------------------------------
            InitializeComponent();
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【メインフォーム_Load】本フォームを初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        private void FrmAppDebugStation_Load(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// DEBUGビルドでない場合は、デバッグ関連のメニューを非表示にする
            //------------------------------------------------------------
#if !DEBUG  // DEBUGビルドでない場合のみ
            MnuDebug.Visible = false;                                   //// メニュー：デバッグ
#endif


            //------------------------------------------------------------
            /// 本フォームを初期化する
            //------------------------------------------------------------
            TmrLogCheck.Enabled = true;                                 //// ログチェックタイマーを起動する


            //------------------------------------------------------------
            /// 後で実装するかもしれないけれども今は使わないメニューを非表示にする
            //------------------------------------------------------------
            MnuEdit.Visible = false;                                    //// メニュー：編集(後で編集機能を追加する可能性がある)
            MnuTool.Visible = false;                                    //// メニュー：ツール(後でオプション画面を追加する可能性がある)
            MnuHelp.Visible = false;                                    //// メニュー：ヘルプ(後でバージョン情報画面を追加する可能性がある)

            MnuFile_NewFile.Visible = false;                            //// メニュー項目：ファイル - 新規作成 (後で表示内容のセーブ・ロード機能を追加する可能性がある)
            MnuFile_OpenFile.Visible = false;                           //// メニュー項目：ファイル - 開く
            MnuFile_SaveFile.Visible = false;                           //// メニュー項目：ファイル - 保存
            MnuFile_SaveAs.Visible = false;                             //// メニュー項目：ファイル - 名前を付けて保存
            MnuFile_Sepa1.Visible = false;
            MnuFile_Sepa2.Visible = false;

            TBtnOpenFile.Visible = false;                               //// ツールバーボタン：ファイルを開く
            TBtnSaveFile.Visible = false;                               //// ツールバーボタン：ファイルを保存


            //------------------------------------------------------------
            /// MDI子フォームを初期化する
            //------------------------------------------------------------
            var frmDebugOutput = new FrmOutputView()
            {                                                           //// 出力ビュー画面を生成する
                MdiParent = this,                                       /////  MDI親フォーム = このフォーム
                WindowState = FormWindowState.Maximized,                /////  フォーム状態 = 最大化
            };
            frmDebugOutput.Show();                                      //// 出力ビュー画面を表示する
        }


        //====================================================================================================
        // コントロールイベント
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【ログチェックタイマー_Tick】
        /// </summary>
        //--------------------------------------------------------------------------------
        private void TmrLogCheck_Tick(object sender, EventArgs e)
        {
            //------------------------------------------------------------
            /// メールスロットをチェックする
            //------------------------------------------------------------
            if (AppBase.mailslotServer == null)
            {                                                           //// メールスロットサーバーを生成していない場合
                return;                                                 /////  何もせずに関数終了
            }

            if (AppBase.mailslotServer.IsOpen == false)
            {                                                           //// メールスロットを開いていない場合
                return;                                                 /////  何もせずに関数終了
            }


            //------------------------------------------------------------
            /// メールスロットのデータを受信する
            //------------------------------------------------------------
            while (AppBase.mailslotServer.GetMessageCount() >= 1)
            {                                                           //// メールスロットに届いているメッセージ数 >= 1 の間、繰り返す
                var message = AppBase.mailslotServer.ReceiveString();   /////  メッセージを取得する

                var debugData = DebugData.ParseXmlString(message);      /////  メッセージ文字列を解析してデバッグデータに変換する
                if (debugData != null)
                {                                                       /////  変換成功の場合
                    foreach (var childForm in MdiChildren)
                    {                                                   //////   MDI子フォームを繰り返す
                        if (childForm is FrmOutputView outputView)
                        {                                               ///////    出力ビュー画面の場合
                            outputView.AddInfo(debugData);              ////////     情報追加(デバッグデータ)処理を行う
                        }
                    }
                }
                else
                {                                                       /////  変換失敗の場合
                    foreach (var childForm in MdiChildren)
                    {                                                   //////   MDI子フォームを繰り返す
                        if (childForm is FrmOutputView outputView)
                        {                                               ///////    出力ビュー画面の場合
                            outputView.AddInfo(message);                ////////     情報追加(生文字列)処理を行う
                        }
                    }
                }
            }
        }


        //====================================================================================================
        // 内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【全ウィンドウ強制クローズ】実行確認なしにすべてのウィンドウを閉じます。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected void M_CloseForceAll()
        {
            //------------------------------------------------------------
            /// 実行確認なしにすべてのウィンドウを閉じる
            //------------------------------------------------------------
            foreach (Form childForm in MdiChildren)
            {                                                           //// MDI子フォームを繰り返す
                if (childForm is IFormCloseControl ifFormCloseControl)
                {                                                       /////  フォームクローズ制御I/Fを持つ場合
                    ifFormCloseControl.CloseForce();                    //////   強制クローズ処理を行う
                }
                else
                {                                                       /////  フォームクローズ制御I/Fを持たない場合
                    childForm.Close();                                  //////   フォームを閉じる
                }
            }
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【クローズ前実行確認要求フラグ】クローズ前に実行確認が必要かどうかを示します。
        /// [true = 実行確認が必要 / false = 実行確認は不要]
        /// </summary>
        //--------------------------------------------------------------------------------
        protected bool M_NeedConfirmationBeforeClose
        {
            get
            {
                //------------------------------------------------------------
                /// クローズ前に実行確認が必要かどうかをチェックする
                //------------------------------------------------------------
                foreach (var childForm in MdiChildren)
                {                                                           //// MDI子フォームを繰り返す
                    if (childForm is IFormCloseControl ifFormCloseControl)
                    {                                                       /////  フォームクローズ制御I/Fを持つ場合
                        if (ifFormCloseControl.NeedConfirmationBeforeClose)
                        {                                                   //////   クローズ前に実行確認が必要な場合
                            return true;                                    ///////    戻り値 = true(実行確認が必要) で関数終了
                        }
                    }
                }

                return false;                                               //// 実行確認の必要なMDI子フォームがなかった場合、戻り値 = false(実行確認は不要) で関数終了
            }
        }

    }
}
